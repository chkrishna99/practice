compile the code wiht -g flag for gdb 
cmds:
set the breakpoint: b line_numbler/fun_name
to see the list of break points: info b
to delete the breakpoints: delete breakpoint number
run the program: run/r
list the lines:  list/l
next line: n
print variable: print/p
setp into function: s
to reach to the break point : continue/c
cmd to verify the on which line in debugging: frame/f and we can change the from one function to another function with: f id
backtrace to check function flow: backtrace/bt
cmd to print the local varibles: info local
cmd to save the breakpoint: save breakpoints file_name_breakpoints
restore the saved breakpoints: source file_name_breakpoints
to see the type of the object: ptype obj_name
cmd to set value to varibles in debugging: set variable_name=value
to set the tmp varibles: set variable $tmp_var=val, and can use tmp_var as gdb varibles
to log the gdb debuging: set logging enable on it will store in gdb.txt
to log the gdb debuging to customefile: set logging file file_name and set logging enable, on it will store in file_name
to overwride on samefile: set loggin overwride on
cmd to jump to frames: up/down


To debug core file:
        gdb <binary> <core> -ex  "thread apply all bt" -ex  "quit" > out.log
cmd to print object: 
        set print pretty on
to print the array:
    print *array_name@size
  print/x *my_array@10  ; Prints 10 elements in hexadecimal
  print/d *my_array@10  ; Prints 10 elements as signed integers
    Ex: int arr[10]; p *arr@10;
--------------------------------
info threads: to see the running threas 
thread id: to switch to required thread id from info threads
thread apply all bt: to see the backtrac of all threads
thread apply all f: to see the frames of all threads
